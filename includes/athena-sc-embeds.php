<?php
/**
 * Logic related to markup generated for WordPress oEmbeds
 **/
if ( ! class_exists( 'ATHENA_SC_Embed_Config' ) ) {
	class ATHENA_SC_Embed_Config {

		/**
		 * Updates oEmbed markup generated by WordPress.
 		 * oEmbed videos are wrapped in a responsive wrapper div.
 		 * All oEmbeds are force-centered.
		 *
		 * Intended for use on the `oembed_dataparse` hook.
		 *
		 * @since 0.4.0
		 * @author Jo Dickson
		 * @param string $html The returned oEmbed HTML.
		 * @param object $data A data object result from an oEmbed provider.
		 * @param string $url The URL of the content to be embedded.
		 * @return mixed Modified oEmbed HTML string
		 */
		public static function enable_responsive_oembeds( $html, $data, $url ) {
			$oembed_class = '';
			if ( $data->type ) {
				$oembed_class = 'oembed-' . $data->type;
			}

			if ( $data->type === 'video' ) {
				$html = '<div class="embed-responsive embed-responsive-16by9">' . $html . '</div>';
			}

			return '<div class="embed oembed ' . $oembed_class . ' d-flex flex-column align-items-center">' . $html . '</div>';
		}

		/**
		 * Updates classes applied to the wrapper element of
		 * WordPress's [video] shortcode markup.
		 * Force-centers all video embeds.
		 *
		 * Intended for use with the `wp_video_shortcode` hook.
		 *
		 * @since 0.4.0
		 * @author Jo Dickson
		 * @param string $output Video shortcode HTML output.
		 * @param array $atts Array of video shortcode attributes.
		 * @param string $video Video file.
		 * @param int $post_id Post ID.
		 * @param string $library Media library used for the video shortcode.
		 */
		public static function enable_responsive_videos( $output, $atts, $video, $post_id, $library ) {
			$output = str_replace( 'class="wp-video"', 'class="wp-video embed embed-video mx-auto"', $output );
			return $output;
		}

	}
}
